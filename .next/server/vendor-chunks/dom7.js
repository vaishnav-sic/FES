"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dom7";
exports.ids = ["vendor-chunks/dom7"];
exports.modules = {

/***/ "(ssr)/./node_modules/dom7/dom7.esm.js":
/*!***************************************!*\
  !*** ./node_modules/dom7/dom7.esm.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ $),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   addClass: () => (/* binding */ addClass),\n/* harmony export */   animate: () => (/* binding */ animate),\n/* harmony export */   animationEnd: () => (/* binding */ animationEnd),\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendTo: () => (/* binding */ appendTo),\n/* harmony export */   attr: () => (/* binding */ attr),\n/* harmony export */   blur: () => (/* binding */ blur),\n/* harmony export */   change: () => (/* binding */ change),\n/* harmony export */   children: () => (/* binding */ children),\n/* harmony export */   click: () => (/* binding */ click),\n/* harmony export */   closest: () => (/* binding */ closest),\n/* harmony export */   css: () => (/* binding */ css),\n/* harmony export */   data: () => (/* binding */ data),\n/* harmony export */   dataset: () => (/* binding */ dataset),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   detach: () => (/* binding */ detach),\n/* harmony export */   each: () => (/* binding */ each),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   eq: () => (/* binding */ eq),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   focus: () => (/* binding */ focus),\n/* harmony export */   focusin: () => (/* binding */ focusin),\n/* harmony export */   focusout: () => (/* binding */ focusout),\n/* harmony export */   hasClass: () => (/* binding */ hasClass),\n/* harmony export */   height: () => (/* binding */ height),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   html: () => (/* binding */ html),\n/* harmony export */   index: () => (/* binding */ index),\n/* harmony export */   insertAfter: () => (/* binding */ insertAfter),\n/* harmony export */   insertBefore: () => (/* binding */ insertBefore),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   keydown: () => (/* binding */ keydown),\n/* harmony export */   keypress: () => (/* binding */ keypress),\n/* harmony export */   keyup: () => (/* binding */ keyup),\n/* harmony export */   mousedown: () => (/* binding */ mousedown),\n/* harmony export */   mouseenter: () => (/* binding */ mouseenter),\n/* harmony export */   mouseleave: () => (/* binding */ mouseleave),\n/* harmony export */   mousemove: () => (/* binding */ mousemove),\n/* harmony export */   mouseout: () => (/* binding */ mouseout),\n/* harmony export */   mouseover: () => (/* binding */ mouseover),\n/* harmony export */   mouseup: () => (/* binding */ mouseup),\n/* harmony export */   next: () => (/* binding */ next),\n/* harmony export */   nextAll: () => (/* binding */ nextAll),\n/* harmony export */   off: () => (/* binding */ off),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   once: () => (/* binding */ once),\n/* harmony export */   outerHeight: () => (/* binding */ outerHeight),\n/* harmony export */   outerWidth: () => (/* binding */ outerWidth),\n/* harmony export */   parent: () => (/* binding */ parent),\n/* harmony export */   parents: () => (/* binding */ parents),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependTo: () => (/* binding */ prependTo),\n/* harmony export */   prev: () => (/* binding */ prev),\n/* harmony export */   prevAll: () => (/* binding */ prevAll),\n/* harmony export */   prop: () => (/* binding */ prop),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   removeAttr: () => (/* binding */ removeAttr),\n/* harmony export */   removeClass: () => (/* binding */ removeClass),\n/* harmony export */   removeData: () => (/* binding */ removeData),\n/* harmony export */   resize: () => (/* binding */ resize),\n/* harmony export */   scroll: () => (/* binding */ scroll),\n/* harmony export */   scrollLeft: () => (/* binding */ scrollLeft),\n/* harmony export */   scrollTo: () => (/* binding */ scrollTo),\n/* harmony export */   scrollTop: () => (/* binding */ scrollTop),\n/* harmony export */   show: () => (/* binding */ show),\n/* harmony export */   siblings: () => (/* binding */ siblings),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   styles: () => (/* binding */ styles),\n/* harmony export */   submit: () => (/* binding */ submit),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   toggleClass: () => (/* binding */ toggleClass),\n/* harmony export */   touchend: () => (/* binding */ touchend),\n/* harmony export */   touchmove: () => (/* binding */ touchmove),\n/* harmony export */   touchstart: () => (/* binding */ touchstart),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transition: () => (/* binding */ transition),\n/* harmony export */   transitionEnd: () => (/* binding */ transitionEnd),\n/* harmony export */   trigger: () => (/* binding */ trigger),\n/* harmony export */   val: () => (/* binding */ val),\n/* harmony export */   value: () => (/* binding */ value),\n/* harmony export */   width: () => (/* binding */ width)\n/* harmony export */ });\n/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ \"(ssr)/./node_modules/ssr-window/ssr-window.esm.js\");\n/**\n * Dom7 3.0.0\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2020, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: November 9, 2020\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n        _construct = Reflect.construct;\n    } else {\n        _construct = function _construct(Parent, args, Class) {\n            var a = [\n                null\n            ];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n            if (Class) _setPrototypeOf(instance, Class.prototype);\n            return instance;\n        };\n    }\n    return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n        if (Class === null || !_isNativeFunction(Class)) return Class;\n        if (typeof Class !== \"function\") {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n        function Wrapper() {\n            return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        return _setPrototypeOf(Wrapper, Class);\n    };\n    return _wrapNativeSuper(Class);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\n/* eslint-disable no-proto */ function makeReactive(obj) {\n    var proto = obj.__proto__;\n    Object.defineProperty(obj, \"__proto__\", {\n        get: function get() {\n            return proto;\n        },\n        set: function set(value) {\n            proto.__proto__ = value;\n        }\n    });\n}\nvar Dom7 = /*#__PURE__*/ function(_Array) {\n    _inheritsLoose(Dom7, _Array);\n    function Dom7(items) {\n        var _this;\n        _this = _Array.call.apply(_Array, [\n            this\n        ].concat(items)) || this;\n        makeReactive(_assertThisInitialized(_this));\n        return _this;\n    }\n    return Dom7;\n}(/*#__PURE__*/ _wrapNativeSuper(Array));\nfunction arrayFlat(arr) {\n    if (arr === void 0) {\n        arr = [];\n    }\n    var res = [];\n    arr.forEach(function(el) {\n        if (Array.isArray(el)) {\n            res.push.apply(res, arrayFlat(el));\n        } else {\n            res.push(el);\n        }\n    });\n    return res;\n}\nfunction arrayFilter(arr, callback) {\n    return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n    var uniqueArray = [];\n    for(var i = 0; i < arr.length; i += 1){\n        if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n    }\n    return uniqueArray;\n}\nfunction toCamelCase(string) {\n    return string.toLowerCase().replace(/-(.)/g, function(match, group) {\n        return group.toUpperCase();\n    });\n}\nfunction qsa(selector, context) {\n    if (typeof selector !== \"string\") {\n        return [\n            selector\n        ];\n    }\n    var a = [];\n    var res = context.querySelectorAll(selector);\n    for(var i = 0; i < res.length; i += 1){\n        a.push(res[i]);\n    }\n    return a;\n}\nfunction $(selector, context) {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    var document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n    var arr = [];\n    if (!context && selector instanceof Dom7) {\n        return selector;\n    }\n    if (!selector) {\n        return new Dom7(arr);\n    }\n    if (typeof selector === \"string\") {\n        var html = selector.trim();\n        if (html.indexOf(\"<\") >= 0 && html.indexOf(\">\") >= 0) {\n            var toCreate = \"div\";\n            if (html.indexOf(\"<li\") === 0) toCreate = \"ul\";\n            if (html.indexOf(\"<tr\") === 0) toCreate = \"tbody\";\n            if (html.indexOf(\"<td\") === 0 || html.indexOf(\"<th\") === 0) toCreate = \"tr\";\n            if (html.indexOf(\"<tbody\") === 0) toCreate = \"table\";\n            if (html.indexOf(\"<option\") === 0) toCreate = \"select\";\n            var tempParent = document.createElement(toCreate);\n            tempParent.innerHTML = html;\n            for(var i = 0; i < tempParent.childNodes.length; i += 1){\n                arr.push(tempParent.childNodes[i]);\n            }\n        } else {\n            arr = qsa(selector.trim(), context || document);\n        } // arr = qsa(selector, document);\n    } else if (selector.nodeType || selector === window || selector === document) {\n        arr.push(selector);\n    } else if (Array.isArray(selector)) {\n        if (selector instanceof Dom7) return selector;\n        arr = selector;\n    }\n    return new Dom7(arrayUnique(arr));\n}\n$.fn = Dom7.prototype;\nfunction addClass() {\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    var classNames = arrayFlat(classes.map(function(c) {\n        return c.split(\" \");\n    }));\n    this.forEach(function(el) {\n        var _el$classList;\n        (_el$classList = el.classList).add.apply(_el$classList, classNames);\n    });\n    return this;\n}\nfunction removeClass() {\n    for(var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n        classes[_key2] = arguments[_key2];\n    }\n    var classNames = arrayFlat(classes.map(function(c) {\n        return c.split(\" \");\n    }));\n    this.forEach(function(el) {\n        var _el$classList2;\n        (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);\n    });\n    return this;\n}\nfunction toggleClass() {\n    for(var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n        classes[_key3] = arguments[_key3];\n    }\n    var classNames = arrayFlat(classes.map(function(c) {\n        return c.split(\" \");\n    }));\n    this.forEach(function(el) {\n        classNames.forEach(function(className) {\n            el.classList.toggle(className);\n        });\n    });\n}\nfunction hasClass() {\n    for(var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n        classes[_key4] = arguments[_key4];\n    }\n    var classNames = arrayFlat(classes.map(function(c) {\n        return c.split(\" \");\n    }));\n    return arrayFilter(this, function(el) {\n        return classNames.filter(function(className) {\n            return el.classList.contains(className);\n        }).length > 0;\n    }).length > 0;\n}\nfunction attr(attrs, value) {\n    if (arguments.length === 1 && typeof attrs === \"string\") {\n        // Get attr\n        if (this[0]) return this[0].getAttribute(attrs);\n        return undefined;\n    } // Set attrs\n    for(var i = 0; i < this.length; i += 1){\n        if (arguments.length === 2) {\n            // String\n            this[i].setAttribute(attrs, value);\n        } else {\n            // Object\n            for(var attrName in attrs){\n                this[i][attrName] = attrs[attrName];\n                this[i].setAttribute(attrName, attrs[attrName]);\n            }\n        }\n    }\n    return this;\n}\nfunction removeAttr(attr) {\n    for(var i = 0; i < this.length; i += 1){\n        this[i].removeAttribute(attr);\n    }\n    return this;\n}\nfunction prop(props, value) {\n    if (arguments.length === 1 && typeof props === \"string\") {\n        // Get prop\n        if (this[0]) return this[0][props];\n    } else {\n        // Set props\n        for(var i = 0; i < this.length; i += 1){\n            if (arguments.length === 2) {\n                // String\n                this[i][props] = value;\n            } else {\n                // Object\n                for(var propName in props){\n                    this[i][propName] = props[propName];\n                }\n            }\n        }\n        return this;\n    }\n    return this;\n}\nfunction data(key, value) {\n    var el;\n    if (typeof value === \"undefined\") {\n        el = this[0];\n        if (!el) return undefined; // Get value\n        if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n            return el.dom7ElementDataStorage[key];\n        }\n        var dataKey = el.getAttribute(\"data-\" + key);\n        if (dataKey) {\n            return dataKey;\n        }\n        return undefined;\n    } // Set value\n    for(var i = 0; i < this.length; i += 1){\n        el = this[i];\n        if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n        el.dom7ElementDataStorage[key] = value;\n    }\n    return this;\n}\nfunction removeData(key) {\n    for(var i = 0; i < this.length; i += 1){\n        var el = this[i];\n        if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n            el.dom7ElementDataStorage[key] = null;\n            delete el.dom7ElementDataStorage[key];\n        }\n    }\n}\nfunction dataset() {\n    var el = this[0];\n    if (!el) return undefined;\n    var dataset = {}; // eslint-disable-line\n    if (el.dataset) {\n        for(var dataKey in el.dataset){\n            dataset[dataKey] = el.dataset[dataKey];\n        }\n    } else {\n        for(var i = 0; i < el.attributes.length; i += 1){\n            var _attr = el.attributes[i];\n            if (_attr.name.indexOf(\"data-\") >= 0) {\n                dataset[toCamelCase(_attr.name.split(\"data-\")[1])] = _attr.value;\n            }\n        }\n    }\n    for(var key in dataset){\n        if (dataset[key] === \"false\") dataset[key] = false;\n        else if (dataset[key] === \"true\") dataset[key] = true;\n        else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n    }\n    return dataset;\n}\nfunction val(value) {\n    if (typeof value === \"undefined\") {\n        // get value\n        var el = this[0];\n        if (!el) return undefined;\n        if (el.multiple && el.nodeName.toLowerCase() === \"select\") {\n            var values = [];\n            for(var i = 0; i < el.selectedOptions.length; i += 1){\n                values.push(el.selectedOptions[i].value);\n            }\n            return values;\n        }\n        return el.value;\n    } // set value\n    for(var _i = 0; _i < this.length; _i += 1){\n        var _el = this[_i];\n        if (Array.isArray(value) && _el.multiple && _el.nodeName.toLowerCase() === \"select\") {\n            for(var j = 0; j < _el.options.length; j += 1){\n                _el.options[j].selected = value.indexOf(_el.options[j].value) >= 0;\n            }\n        } else {\n            _el.value = value;\n        }\n    }\n    return this;\n}\nfunction value(value) {\n    return this.val(value);\n}\nfunction transform(transform) {\n    for(var i = 0; i < this.length; i += 1){\n        this[i].style.transform = transform;\n    }\n    return this;\n}\nfunction transition(duration) {\n    for(var i = 0; i < this.length; i += 1){\n        this[i].style.transitionDuration = typeof duration !== \"string\" ? duration + \"ms\" : duration;\n    }\n    return this;\n}\nfunction on() {\n    for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++){\n        args[_key5] = arguments[_key5];\n    }\n    var eventType = args[0], targetSelector = args[1], listener = args[2], capture = args[3];\n    if (typeof args[1] === \"function\") {\n        eventType = args[0];\n        listener = args[1];\n        capture = args[2];\n        targetSelector = undefined;\n    }\n    if (!capture) capture = false;\n    function handleLiveEvent(e) {\n        var target = e.target;\n        if (!target) return;\n        var eventData = e.target.dom7EventData || [];\n        if (eventData.indexOf(e) < 0) {\n            eventData.unshift(e);\n        }\n        if ($(target).is(targetSelector)) listener.apply(target, eventData);\n        else {\n            var _parents = $(target).parents(); // eslint-disable-line\n            for(var k = 0; k < _parents.length; k += 1){\n                if ($(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);\n            }\n        }\n    }\n    function handleEvent(e) {\n        var eventData = e && e.target ? e.target.dom7EventData || [] : [];\n        if (eventData.indexOf(e) < 0) {\n            eventData.unshift(e);\n        }\n        listener.apply(this, eventData);\n    }\n    var events = eventType.split(\" \");\n    var j;\n    for(var i = 0; i < this.length; i += 1){\n        var el = this[i];\n        if (!targetSelector) {\n            for(j = 0; j < events.length; j += 1){\n                var event = events[j];\n                if (!el.dom7Listeners) el.dom7Listeners = {};\n                if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n                el.dom7Listeners[event].push({\n                    listener: listener,\n                    proxyListener: handleEvent\n                });\n                el.addEventListener(event, handleEvent, capture);\n            }\n        } else {\n            // Live events\n            for(j = 0; j < events.length; j += 1){\n                var _event = events[j];\n                if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n                if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];\n                el.dom7LiveListeners[_event].push({\n                    listener: listener,\n                    proxyListener: handleLiveEvent\n                });\n                el.addEventListener(_event, handleLiveEvent, capture);\n            }\n        }\n    }\n    return this;\n}\nfunction off() {\n    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++){\n        args[_key6] = arguments[_key6];\n    }\n    var eventType = args[0], targetSelector = args[1], listener = args[2], capture = args[3];\n    if (typeof args[1] === \"function\") {\n        eventType = args[0];\n        listener = args[1];\n        capture = args[2];\n        targetSelector = undefined;\n    }\n    if (!capture) capture = false;\n    var events = eventType.split(\" \");\n    for(var i = 0; i < events.length; i += 1){\n        var event = events[i];\n        for(var j = 0; j < this.length; j += 1){\n            var el = this[j];\n            var handlers = void 0;\n            if (!targetSelector && el.dom7Listeners) {\n                handlers = el.dom7Listeners[event];\n            } else if (targetSelector && el.dom7LiveListeners) {\n                handlers = el.dom7LiveListeners[event];\n            }\n            if (handlers && handlers.length) {\n                for(var k = handlers.length - 1; k >= 0; k -= 1){\n                    var handler = handlers[k];\n                    if (listener && handler.listener === listener) {\n                        el.removeEventListener(event, handler.proxyListener, capture);\n                        handlers.splice(k, 1);\n                    } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n                        el.removeEventListener(event, handler.proxyListener, capture);\n                        handlers.splice(k, 1);\n                    } else if (!listener) {\n                        el.removeEventListener(event, handler.proxyListener, capture);\n                        handlers.splice(k, 1);\n                    }\n                }\n            }\n        }\n    }\n    return this;\n}\nfunction once() {\n    var dom = this;\n    for(var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++){\n        args[_key7] = arguments[_key7];\n    }\n    var eventName = args[0], targetSelector = args[1], listener = args[2], capture = args[3];\n    if (typeof args[1] === \"function\") {\n        eventName = args[0];\n        listener = args[1];\n        capture = args[2];\n        targetSelector = undefined;\n    }\n    function onceHandler() {\n        for(var _len8 = arguments.length, eventArgs = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++){\n            eventArgs[_key8] = arguments[_key8];\n        }\n        listener.apply(this, eventArgs);\n        dom.off(eventName, targetSelector, onceHandler, capture);\n        if (onceHandler.dom7proxy) {\n            delete onceHandler.dom7proxy;\n        }\n    }\n    onceHandler.dom7proxy = listener;\n    return dom.on(eventName, targetSelector, onceHandler, capture);\n}\nfunction trigger() {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    for(var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++){\n        args[_key9] = arguments[_key9];\n    }\n    var events = args[0].split(\" \");\n    var eventData = args[1];\n    for(var i = 0; i < events.length; i += 1){\n        var event = events[i];\n        for(var j = 0; j < this.length; j += 1){\n            var el = this[j];\n            if (window.CustomEvent) {\n                var evt = new window.CustomEvent(event, {\n                    detail: eventData,\n                    bubbles: true,\n                    cancelable: true\n                });\n                el.dom7EventData = args.filter(function(data, dataIndex) {\n                    return dataIndex > 0;\n                });\n                el.dispatchEvent(evt);\n                el.dom7EventData = [];\n                delete el.dom7EventData;\n            }\n        }\n    }\n    return this;\n}\nfunction transitionEnd(callback) {\n    var dom = this;\n    function fireCallBack(e) {\n        if (e.target !== this) return;\n        callback.call(this, e);\n        dom.off(\"transitionend\", fireCallBack);\n    }\n    if (callback) {\n        dom.on(\"transitionend\", fireCallBack);\n    }\n    return this;\n}\nfunction animationEnd(callback) {\n    var dom = this;\n    function fireCallBack(e) {\n        if (e.target !== this) return;\n        callback.call(this, e);\n        dom.off(\"animationend\", fireCallBack);\n    }\n    if (callback) {\n        dom.on(\"animationend\", fireCallBack);\n    }\n    return this;\n}\nfunction width() {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    if (this[0] === window) {\n        return window.innerWidth;\n    }\n    if (this.length > 0) {\n        return parseFloat(this.css(\"width\"));\n    }\n    return null;\n}\nfunction outerWidth(includeMargins) {\n    if (this.length > 0) {\n        if (includeMargins) {\n            var _styles = this.styles();\n            return this[0].offsetWidth + parseFloat(_styles.getPropertyValue(\"margin-right\")) + parseFloat(_styles.getPropertyValue(\"margin-left\"));\n        }\n        return this[0].offsetWidth;\n    }\n    return null;\n}\nfunction height() {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    if (this[0] === window) {\n        return window.innerHeight;\n    }\n    if (this.length > 0) {\n        return parseFloat(this.css(\"height\"));\n    }\n    return null;\n}\nfunction outerHeight(includeMargins) {\n    if (this.length > 0) {\n        if (includeMargins) {\n            var _styles2 = this.styles();\n            return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue(\"margin-top\")) + parseFloat(_styles2.getPropertyValue(\"margin-bottom\"));\n        }\n        return this[0].offsetHeight;\n    }\n    return null;\n}\nfunction offset() {\n    if (this.length > 0) {\n        var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n        var document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n        var el = this[0];\n        var box = el.getBoundingClientRect();\n        var body = document.body;\n        var clientTop = el.clientTop || body.clientTop || 0;\n        var clientLeft = el.clientLeft || body.clientLeft || 0;\n        var scrollTop = el === window ? window.scrollY : el.scrollTop;\n        var scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n        return {\n            top: box.top + scrollTop - clientTop,\n            left: box.left + scrollLeft - clientLeft\n        };\n    }\n    return null;\n}\nfunction hide() {\n    for(var i = 0; i < this.length; i += 1){\n        this[i].style.display = \"none\";\n    }\n    return this;\n}\nfunction show() {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    for(var i = 0; i < this.length; i += 1){\n        var el = this[i];\n        if (el.style.display === \"none\") {\n            el.style.display = \"\";\n        }\n        if (window.getComputedStyle(el, null).getPropertyValue(\"display\") === \"none\") {\n            // Still not visible\n            el.style.display = \"block\";\n        }\n    }\n    return this;\n}\nfunction styles() {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    if (this[0]) return window.getComputedStyle(this[0], null);\n    return {};\n}\nfunction css(props, value) {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    var i;\n    if (arguments.length === 1) {\n        if (typeof props === \"string\") {\n            // .css('width')\n            if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n        } else {\n            // .css({ width: '100px' })\n            for(i = 0; i < this.length; i += 1){\n                for(var _prop in props){\n                    this[i].style[_prop] = props[_prop];\n                }\n            }\n            return this;\n        }\n    }\n    if (arguments.length === 2 && typeof props === \"string\") {\n        // .css('width', '100px')\n        for(i = 0; i < this.length; i += 1){\n            this[i].style[props] = value;\n        }\n        return this;\n    }\n    return this;\n}\nfunction each(callback) {\n    if (!callback) return this;\n    this.forEach(function(el, index) {\n        callback.apply(el, [\n            el,\n            index\n        ]);\n    });\n    return this;\n}\nfunction filter(callback) {\n    var result = arrayFilter(this, callback);\n    return $(result);\n}\nfunction html(html) {\n    if (typeof html === \"undefined\") {\n        return this[0] ? this[0].innerHTML : null;\n    }\n    for(var i = 0; i < this.length; i += 1){\n        this[i].innerHTML = html;\n    }\n    return this;\n}\nfunction text(text) {\n    if (typeof text === \"undefined\") {\n        return this[0] ? this[0].textContent.trim() : null;\n    }\n    for(var i = 0; i < this.length; i += 1){\n        this[i].textContent = text;\n    }\n    return this;\n}\nfunction is(selector) {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    var document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n    var el = this[0];\n    var compareWith;\n    var i;\n    if (!el || typeof selector === \"undefined\") return false;\n    if (typeof selector === \"string\") {\n        if (el.matches) return el.matches(selector);\n        if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n        if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n        compareWith = $(selector);\n        for(i = 0; i < compareWith.length; i += 1){\n            if (compareWith[i] === el) return true;\n        }\n        return false;\n    }\n    if (selector === document) {\n        return el === document;\n    }\n    if (selector === window) {\n        return el === window;\n    }\n    if (selector.nodeType || selector instanceof Dom7) {\n        compareWith = selector.nodeType ? [\n            selector\n        ] : selector;\n        for(i = 0; i < compareWith.length; i += 1){\n            if (compareWith[i] === el) return true;\n        }\n        return false;\n    }\n    return false;\n}\nfunction index() {\n    var child = this[0];\n    var i;\n    if (child) {\n        i = 0; // eslint-disable-next-line\n        while((child = child.previousSibling) !== null){\n            if (child.nodeType === 1) i += 1;\n        }\n        return i;\n    }\n    return undefined;\n}\nfunction eq(index) {\n    if (typeof index === \"undefined\") return this;\n    var length = this.length;\n    if (index > length - 1) {\n        return $([]);\n    }\n    if (index < 0) {\n        var returnIndex = length + index;\n        if (returnIndex < 0) return $([]);\n        return $([\n            this[returnIndex]\n        ]);\n    }\n    return $([\n        this[index]\n    ]);\n}\nfunction append() {\n    var newChild;\n    var document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n    for(var k = 0; k < arguments.length; k += 1){\n        newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];\n        for(var i = 0; i < this.length; i += 1){\n            if (typeof newChild === \"string\") {\n                var tempDiv = document.createElement(\"div\");\n                tempDiv.innerHTML = newChild;\n                while(tempDiv.firstChild){\n                    this[i].appendChild(tempDiv.firstChild);\n                }\n            } else if (newChild instanceof Dom7) {\n                for(var j = 0; j < newChild.length; j += 1){\n                    this[i].appendChild(newChild[j]);\n                }\n            } else {\n                this[i].appendChild(newChild);\n            }\n        }\n    }\n    return this;\n}\nfunction appendTo(parent) {\n    $(parent).append(this);\n    return this;\n}\nfunction prepend(newChild) {\n    var document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n    var i;\n    var j;\n    for(i = 0; i < this.length; i += 1){\n        if (typeof newChild === \"string\") {\n            var tempDiv = document.createElement(\"div\");\n            tempDiv.innerHTML = newChild;\n            for(j = tempDiv.childNodes.length - 1; j >= 0; j -= 1){\n                this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n            }\n        } else if (newChild instanceof Dom7) {\n            for(j = 0; j < newChild.length; j += 1){\n                this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n            }\n        } else {\n            this[i].insertBefore(newChild, this[i].childNodes[0]);\n        }\n    }\n    return this;\n}\nfunction prependTo(parent) {\n    $(parent).prepend(this);\n    return this;\n}\nfunction insertBefore(selector) {\n    var before = $(selector);\n    for(var i = 0; i < this.length; i += 1){\n        if (before.length === 1) {\n            before[0].parentNode.insertBefore(this[i], before[0]);\n        } else if (before.length > 1) {\n            for(var j = 0; j < before.length; j += 1){\n                before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n            }\n        }\n    }\n}\nfunction insertAfter(selector) {\n    var after = $(selector);\n    for(var i = 0; i < this.length; i += 1){\n        if (after.length === 1) {\n            after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n        } else if (after.length > 1) {\n            for(var j = 0; j < after.length; j += 1){\n                after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n            }\n        }\n    }\n}\nfunction next(selector) {\n    if (this.length > 0) {\n        if (selector) {\n            if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n                return $([\n                    this[0].nextElementSibling\n                ]);\n            }\n            return $([]);\n        }\n        if (this[0].nextElementSibling) return $([\n            this[0].nextElementSibling\n        ]);\n        return $([]);\n    }\n    return $([]);\n}\nfunction nextAll(selector) {\n    var nextEls = [];\n    var el = this[0];\n    if (!el) return $([]);\n    while(el.nextElementSibling){\n        var _next = el.nextElementSibling; // eslint-disable-line\n        if (selector) {\n            if ($(_next).is(selector)) nextEls.push(_next);\n        } else nextEls.push(_next);\n        el = _next;\n    }\n    return $(nextEls);\n}\nfunction prev(selector) {\n    if (this.length > 0) {\n        var el = this[0];\n        if (selector) {\n            if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n                return $([\n                    el.previousElementSibling\n                ]);\n            }\n            return $([]);\n        }\n        if (el.previousElementSibling) return $([\n            el.previousElementSibling\n        ]);\n        return $([]);\n    }\n    return $([]);\n}\nfunction prevAll(selector) {\n    var prevEls = [];\n    var el = this[0];\n    if (!el) return $([]);\n    while(el.previousElementSibling){\n        var _prev = el.previousElementSibling; // eslint-disable-line\n        if (selector) {\n            if ($(_prev).is(selector)) prevEls.push(_prev);\n        } else prevEls.push(_prev);\n        el = _prev;\n    }\n    return $(prevEls);\n}\nfunction siblings(selector) {\n    return this.nextAll(selector).add(this.prevAll(selector));\n}\nfunction parent(selector) {\n    var parents = []; // eslint-disable-line\n    for(var i = 0; i < this.length; i += 1){\n        if (this[i].parentNode !== null) {\n            if (selector) {\n                if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n            } else {\n                parents.push(this[i].parentNode);\n            }\n        }\n    }\n    return $(parents);\n}\nfunction parents(selector) {\n    var parents = []; // eslint-disable-line\n    for(var i = 0; i < this.length; i += 1){\n        var _parent = this[i].parentNode; // eslint-disable-line\n        while(_parent){\n            if (selector) {\n                if ($(_parent).is(selector)) parents.push(_parent);\n            } else {\n                parents.push(_parent);\n            }\n            _parent = _parent.parentNode;\n        }\n    }\n    return $(parents);\n}\nfunction closest(selector) {\n    var closest = this; // eslint-disable-line\n    if (typeof selector === \"undefined\") {\n        return $([]);\n    }\n    if (!closest.is(selector)) {\n        closest = closest.parents(selector).eq(0);\n    }\n    return closest;\n}\nfunction find(selector) {\n    var foundElements = [];\n    for(var i = 0; i < this.length; i += 1){\n        var found = this[i].querySelectorAll(selector);\n        for(var j = 0; j < found.length; j += 1){\n            foundElements.push(found[j]);\n        }\n    }\n    return $(foundElements);\n}\nfunction children(selector) {\n    var children = []; // eslint-disable-line\n    for(var i = 0; i < this.length; i += 1){\n        var childNodes = this[i].children;\n        for(var j = 0; j < childNodes.length; j += 1){\n            if (!selector || $(childNodes[j]).is(selector)) {\n                children.push(childNodes[j]);\n            }\n        }\n    }\n    return $(children);\n}\nfunction remove() {\n    for(var i = 0; i < this.length; i += 1){\n        if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n    }\n    return this;\n}\nfunction detach() {\n    return this.remove();\n}\nfunction add() {\n    var dom = this;\n    var i;\n    var j;\n    for(var _len10 = arguments.length, els = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++){\n        els[_key10] = arguments[_key10];\n    }\n    for(i = 0; i < els.length; i += 1){\n        var toAdd = $(els[i]);\n        for(j = 0; j < toAdd.length; j += 1){\n            dom.push(toAdd[j]);\n        }\n    }\n    return dom;\n}\nfunction empty() {\n    for(var i = 0; i < this.length; i += 1){\n        var el = this[i];\n        if (el.nodeType === 1) {\n            for(var j = 0; j < el.childNodes.length; j += 1){\n                if (el.childNodes[j].parentNode) {\n                    el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n                }\n            }\n            el.textContent = \"\";\n        }\n    }\n    return this;\n}\nfunction scrollTo() {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var left = args[0], top = args[1], duration = args[2], easing = args[3], callback = args[4];\n    if (args.length === 4 && typeof easing === \"function\") {\n        callback = easing;\n        left = args[0];\n        top = args[1];\n        duration = args[2];\n        callback = args[3];\n        easing = args[4];\n    }\n    if (typeof easing === \"undefined\") easing = \"swing\";\n    return this.each(function animate() {\n        var el = this;\n        var currentTop;\n        var currentLeft;\n        var maxTop;\n        var maxLeft;\n        var newTop;\n        var newLeft;\n        var scrollTop; // eslint-disable-line\n        var scrollLeft; // eslint-disable-line\n        var animateTop = top > 0 || top === 0;\n        var animateLeft = left > 0 || left === 0;\n        if (typeof easing === \"undefined\") {\n            easing = \"swing\";\n        }\n        if (animateTop) {\n            currentTop = el.scrollTop;\n            if (!duration) {\n                el.scrollTop = top;\n            }\n        }\n        if (animateLeft) {\n            currentLeft = el.scrollLeft;\n            if (!duration) {\n                el.scrollLeft = left;\n            }\n        }\n        if (!duration) return;\n        if (animateTop) {\n            maxTop = el.scrollHeight - el.offsetHeight;\n            newTop = Math.max(Math.min(top, maxTop), 0);\n        }\n        if (animateLeft) {\n            maxLeft = el.scrollWidth - el.offsetWidth;\n            newLeft = Math.max(Math.min(left, maxLeft), 0);\n        }\n        var startTime = null;\n        if (animateTop && newTop === currentTop) animateTop = false;\n        if (animateLeft && newLeft === currentLeft) animateLeft = false;\n        function render(time) {\n            if (time === void 0) {\n                time = new Date().getTime();\n            }\n            if (startTime === null) {\n                startTime = time;\n            }\n            var progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n            var easeProgress = easing === \"linear\" ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n            var done;\n            if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n            if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n            if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n                el.scrollTop = newTop;\n                done = true;\n            }\n            if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n                el.scrollTop = newTop;\n                done = true;\n            }\n            if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n                el.scrollLeft = newLeft;\n                done = true;\n            }\n            if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n                el.scrollLeft = newLeft;\n                done = true;\n            }\n            if (done) {\n                if (callback) callback();\n                return;\n            }\n            if (animateTop) el.scrollTop = scrollTop;\n            if (animateLeft) el.scrollLeft = scrollLeft;\n            window.requestAnimationFrame(render);\n        }\n        window.requestAnimationFrame(render);\n    });\n} // scrollTop(top, duration, easing, callback) {\nfunction scrollTop() {\n    for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n        args[_key2] = arguments[_key2];\n    }\n    var top = args[0], duration = args[1], easing = args[2], callback = args[3];\n    if (args.length === 3 && typeof easing === \"function\") {\n        top = args[0];\n        duration = args[1];\n        callback = args[2];\n        easing = args[3];\n    }\n    var dom = this;\n    if (typeof top === \"undefined\") {\n        if (dom.length > 0) return dom[0].scrollTop;\n        return null;\n    }\n    return dom.scrollTo(undefined, top, duration, easing, callback);\n}\nfunction scrollLeft() {\n    for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n        args[_key3] = arguments[_key3];\n    }\n    var left = args[0], duration = args[1], easing = args[2], callback = args[3];\n    if (args.length === 3 && typeof easing === \"function\") {\n        left = args[0];\n        duration = args[1];\n        callback = args[2];\n        easing = args[3];\n    }\n    var dom = this;\n    if (typeof left === \"undefined\") {\n        if (dom.length > 0) return dom[0].scrollLeft;\n        return null;\n    }\n    return dom.scrollTo(left, undefined, duration, easing, callback);\n}\nfunction animate(initialProps, initialParams) {\n    var window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    var els = this;\n    var a = {\n        props: Object.assign({}, initialProps),\n        params: Object.assign({\n            duration: 300,\n            easing: \"swing\" // or 'linear'\n        }, initialParams),\n        elements: els,\n        animating: false,\n        que: [],\n        easingProgress: function easingProgress(easing, progress) {\n            if (easing === \"swing\") {\n                return 0.5 - Math.cos(progress * Math.PI) / 2;\n            }\n            if (typeof easing === \"function\") {\n                return easing(progress);\n            }\n            return progress;\n        },\n        stop: function stop() {\n            if (a.frameId) {\n                window.cancelAnimationFrame(a.frameId);\n            }\n            a.animating = false;\n            a.elements.each(function(el) {\n                var element = el;\n                delete element.dom7AnimateInstance;\n            });\n            a.que = [];\n        },\n        done: function done(complete) {\n            a.animating = false;\n            a.elements.each(function(el) {\n                var element = el;\n                delete element.dom7AnimateInstance;\n            });\n            if (complete) complete(els);\n            if (a.que.length > 0) {\n                var que = a.que.shift();\n                a.animate(que[0], que[1]);\n            }\n        },\n        animate: function animate(props, params) {\n            if (a.animating) {\n                a.que.push([\n                    props,\n                    params\n                ]);\n                return a;\n            }\n            var elements = []; // Define & Cache Initials & Units\n            a.elements.each(function(el, index) {\n                var initialFullValue;\n                var initialValue;\n                var unit;\n                var finalValue;\n                var finalFullValue;\n                if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n                elements[index] = {\n                    container: el\n                };\n                Object.keys(props).forEach(function(prop) {\n                    initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(\",\", \".\");\n                    initialValue = parseFloat(initialFullValue);\n                    unit = initialFullValue.replace(initialValue, \"\");\n                    finalValue = parseFloat(props[prop]);\n                    finalFullValue = props[prop] + unit;\n                    elements[index][prop] = {\n                        initialFullValue: initialFullValue,\n                        initialValue: initialValue,\n                        unit: unit,\n                        finalValue: finalValue,\n                        finalFullValue: finalFullValue,\n                        currentValue: initialValue\n                    };\n                });\n            });\n            var startTime = null;\n            var time;\n            var elementsDone = 0;\n            var propsDone = 0;\n            var done;\n            var began = false;\n            a.animating = true;\n            function render() {\n                time = new Date().getTime();\n                var progress;\n                var easeProgress; // let el;\n                if (!began) {\n                    began = true;\n                    if (params.begin) params.begin(els);\n                }\n                if (startTime === null) {\n                    startTime = time;\n                }\n                if (params.progress) {\n                    // eslint-disable-next-line\n                    params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n                }\n                elements.forEach(function(element) {\n                    var el = element;\n                    if (done || el.done) return;\n                    Object.keys(props).forEach(function(prop) {\n                        if (done || el.done) return;\n                        progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n                        easeProgress = a.easingProgress(params.easing, progress);\n                        var _el$prop = el[prop], initialValue = _el$prop.initialValue, finalValue = _el$prop.finalValue, unit = _el$prop.unit;\n                        el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n                        var currentValue = el[prop].currentValue;\n                        if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n                            el.container.style[prop] = finalValue + unit;\n                            propsDone += 1;\n                            if (propsDone === Object.keys(props).length) {\n                                el.done = true;\n                                elementsDone += 1;\n                            }\n                            if (elementsDone === elements.length) {\n                                done = true;\n                            }\n                        }\n                        if (done) {\n                            a.done(params.complete);\n                            return;\n                        }\n                        el.container.style[prop] = currentValue + unit;\n                    });\n                });\n                if (done) return; // Then call\n                a.frameId = window.requestAnimationFrame(render);\n            }\n            a.frameId = window.requestAnimationFrame(render);\n            return a;\n        }\n    };\n    if (a.elements.length === 0) {\n        return els;\n    }\n    var animateInstance;\n    for(var i = 0; i < a.elements.length; i += 1){\n        if (a.elements[i].dom7AnimateInstance) {\n            animateInstance = a.elements[i].dom7AnimateInstance;\n        } else a.elements[i].dom7AnimateInstance = a;\n    }\n    if (!animateInstance) {\n        animateInstance = a;\n    }\n    if (initialProps === \"stop\") {\n        animateInstance.stop();\n    } else {\n        animateInstance.animate(a.props, a.params);\n    }\n    return els;\n}\nfunction stop() {\n    var els = this;\n    for(var i = 0; i < els.length; i += 1){\n        if (els[i].dom7AnimateInstance) {\n            els[i].dom7AnimateInstance.stop();\n        }\n    }\n}\nvar noTrigger = \"resize scroll\".split(\" \");\nfunction shortcut(name) {\n    function eventHandler() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (typeof args[0] === \"undefined\") {\n            for(var i = 0; i < this.length; i += 1){\n                if (noTrigger.indexOf(name) < 0) {\n                    if (name in this[i]) this[i][name]();\n                    else {\n                        $(this[i]).trigger(name);\n                    }\n                }\n            }\n            return this;\n        }\n        return this.on.apply(this, [\n            name\n        ].concat(args));\n    }\n    return eventHandler;\n}\nvar click = shortcut(\"click\");\nvar blur = shortcut(\"blur\");\nvar focus = shortcut(\"focus\");\nvar focusin = shortcut(\"focusin\");\nvar focusout = shortcut(\"focusout\");\nvar keyup = shortcut(\"keyup\");\nvar keydown = shortcut(\"keydown\");\nvar keypress = shortcut(\"keypress\");\nvar submit = shortcut(\"submit\");\nvar change = shortcut(\"change\");\nvar mousedown = shortcut(\"mousedown\");\nvar mousemove = shortcut(\"mousemove\");\nvar mouseup = shortcut(\"mouseup\");\nvar mouseenter = shortcut(\"mouseenter\");\nvar mouseleave = shortcut(\"mouseleave\");\nvar mouseout = shortcut(\"mouseout\");\nvar mouseover = shortcut(\"mouseover\");\nvar touchstart = shortcut(\"touchstart\");\nvar touchend = shortcut(\"touchend\");\nvar touchmove = shortcut(\"touchmove\");\nvar resize = shortcut(\"resize\");\nvar scroll = shortcut(\"scroll\");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ($);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dom7/dom7.esm.js\n");

/***/ })

};
;